#include "DacProviderImpl.h"

#include <crypto/CHIPCryptoPAL.h>
#include <cstring>

using namespace chip;

namespace {

// credentials/development/attestation/Matter-Development-PAI-FFF1-noPID-Cert.der
constexpr uint8_t kPaiCert[] = {
    0x30, 0x82, 0x01, 0xcb, 0x30, 0x82, 0x01, 0x71, 0xa0, 0x03, 0x02, 0x01,
    0x02, 0x02, 0x08, 0x56, 0xad, 0x82, 0x22, 0xad, 0x94, 0x5b, 0x64, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
    0x30, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0f,
    0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20,
    0x50, 0x41, 0x41, 0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06, 0x01,
    0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02, 0x01, 0x0c, 0x04, 0x46, 0x46, 0x46,
    0x31, 0x30, 0x20, 0x17, 0x0d, 0x32, 0x32, 0x30, 0x32, 0x30, 0x35, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x18, 0x0f, 0x39, 0x39, 0x39, 0x39,
    0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5a, 0x30,
    0x3d, 0x31, 0x25, 0x30, 0x23, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1c,
    0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x44, 0x65, 0x76, 0x20, 0x50,
    0x41, 0x49, 0x20, 0x30, 0x78, 0x46, 0x46, 0x46, 0x31, 0x20, 0x6e, 0x6f,
    0x20, 0x50, 0x49, 0x44, 0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02, 0x01, 0x0c, 0x04, 0x46, 0x46,
    0x46, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
    0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01,
    0x07, 0x03, 0x42, 0x00, 0x04, 0x41, 0x9a, 0x93, 0x15, 0xc2, 0x17, 0x3e,
    0x0c, 0x8c, 0x87, 0x6d, 0x03, 0xcc, 0xfc, 0x94, 0x48, 0x52, 0x64, 0x7f,
    0x7f, 0xec, 0x5e, 0x50, 0x82, 0xf4, 0x05, 0x99, 0x28, 0xec, 0xa8, 0x94,
    0xc5, 0x94, 0x15, 0x13, 0x09, 0xac, 0x63, 0x1e, 0x4c, 0xb0, 0x33, 0x92,
    0xaf, 0x68, 0x4b, 0x0b, 0xaf, 0xb7, 0xe6, 0x5b, 0x3b, 0x81, 0x62, 0xc2,
    0xf5, 0x2b, 0xf9, 0x31, 0xb8, 0xe7, 0x7a, 0xaa, 0x82, 0xa3, 0x66, 0x30,
    0x64, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
    0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x0e, 0x06,
    0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01,
    0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14,
    0x63, 0x54, 0x0e, 0x47, 0xf6, 0x4b, 0x1c, 0x38, 0xd1, 0x38, 0x84, 0xa4,
    0x62, 0xd1, 0x6c, 0x19, 0x5d, 0x8f, 0xfb, 0x3c, 0x30, 0x1f, 0x06, 0x03,
    0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x6a, 0xfd, 0x22,
    0x77, 0x1f, 0x51, 0x1f, 0xec, 0xbf, 0x16, 0x41, 0x97, 0x67, 0x10, 0xdc,
    0xdc, 0x31, 0xa1, 0x71, 0x7e, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21,
    0x00, 0xb2, 0xef, 0x27, 0xf4, 0x9a, 0xe9, 0xb5, 0x0f, 0xb9, 0x1e, 0xea,
    0xc9, 0x4c, 0x4d, 0x0b, 0xdb, 0xb8, 0xd7, 0x92, 0x9c, 0x6c, 0xb8, 0x8f,
    0xac, 0xe5, 0x29, 0x36, 0x8d, 0x12, 0x05, 0x4c, 0x0c, 0x02, 0x20, 0x65,
    0x5d, 0xc9, 0x2b, 0x86, 0xbd, 0x90, 0x98, 0x82, 0xa6, 0xc6, 0x21, 0x77,
    0xb8, 0x25, 0xd7, 0xd0, 0x5e, 0xdb, 0xe7, 0xc2, 0x2f, 0x9f, 0xea, 0x71,
    0x22, 0x0e, 0x7e, 0xa7, 0x03, 0xf8, 0x91
};

constexpr uint8_t kDacCert[] = {
    0x30, 0x82, 0x01, 0xde, 0x30, 0x82, 0x01, 0x85, 0xa0, 0x03, 0x02, 0x01,
    0x02, 0x02, 0x08, 0x03, 0xcb, 0x9f, 0x1f, 0x45, 0x3f, 0xfb, 0x41, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
    0x3d, 0x31, 0x25, 0x30, 0x23, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1c,
    0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x44, 0x65, 0x76, 0x20, 0x50,
    0x41, 0x49, 0x20, 0x30, 0x78, 0x46, 0x46, 0x46, 0x31, 0x20, 0x6e, 0x6f,
    0x20, 0x50, 0x49, 0x44, 0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02, 0x01, 0x0c, 0x04, 0x46, 0x46,
    0x46, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x35, 0x30, 0x31,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x34, 0x35, 0x30,
    0x34, 0x33, 0x30, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5a, 0x30, 0x4c,
    0x31, 0x1e, 0x30, 0x1c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x15, 0x4d,
    0x6f, 0x62, 0x69, 0x6c, 0x75, 0x73, 0x20, 0x4d, 0x61, 0x74, 0x74, 0x65,
    0x72, 0x20, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31, 0x14, 0x30, 0x12,
    0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02, 0x01,
    0x0c, 0x04, 0x46, 0x46, 0x46, 0x31, 0x31, 0x14, 0x30, 0x12, 0x06, 0x0a,
    0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02, 0x02, 0x0c, 0x04,
    0x32, 0x30, 0x30, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
    0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x8d, 0x17, 0x07, 0xf2, 0x7c,
    0xc3, 0x74, 0x13, 0x8b, 0xfc, 0x59, 0x6d, 0x55, 0x42, 0xcf, 0xe8, 0x0c,
    0xd3, 0x49, 0x49, 0x0b, 0xa1, 0x68, 0x25, 0x95, 0x50, 0x66, 0x4c, 0x60,
    0x19, 0x7a, 0x5d, 0xd5, 0xd3, 0x57, 0x40, 0xb3, 0x2a, 0x3f, 0xc1, 0x99,
    0x33, 0x4d, 0xd8, 0x96, 0x16, 0x2d, 0xf6, 0xf8, 0x14, 0xd5, 0x41, 0x7b,
    0x29, 0x26, 0xe1, 0x1e, 0xd3, 0x1d, 0xdd, 0xc3, 0x79, 0xff, 0x55, 0xa3,
    0x60, 0x30, 0x5e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01,
    0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f,
    0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x1d, 0x06,
    0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x73, 0x53, 0xa2, 0x14,
    0x35, 0xa3, 0xcf, 0xe1, 0x0f, 0x79, 0xe5, 0xf7, 0xd6, 0x3c, 0x81, 0xf7,
    0x33, 0x48, 0x8c, 0x1c, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04,
    0x18, 0x30, 0x16, 0x80, 0x14, 0x63, 0x54, 0x0e, 0x47, 0xf6, 0x4b, 0x1c,
    0x38, 0xd1, 0x38, 0x84, 0xa4, 0x62, 0xd1, 0x6c, 0x19, 0x5d, 0x8f, 0xfb,
    0x3c, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,
    0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x40, 0xb6, 0xd3, 0xd5,
    0xfc, 0x47, 0xc7, 0x30, 0x7b, 0x8d, 0xa2, 0xd1, 0x63, 0x89, 0xe8, 0xc5,
    0xb7, 0x31, 0x03, 0x54, 0xe4, 0xb2, 0x88, 0x08, 0xc5, 0xcc, 0xc4, 0x83,
    0x12, 0xce, 0xbb, 0x19, 0x02, 0x20, 0x16, 0xdb, 0x6d, 0x16, 0x10, 0xda,
    0xf5, 0x1c, 0xee, 0x79, 0x2b, 0xb8, 0xe1, 0x27, 0xd9, 0x20, 0xf1, 0x22,
    0xbb, 0xbc, 0x28, 0x71, 0xaf, 0xc2, 0xec, 0x82, 0x37, 0x10, 0x3a, 0x8e,
    0xe1, 0xe2
};

constexpr uint8_t kDacKey[] = {
    0x04, 0x8d, 0x17, 0x07, 0xf2, 0x7c, 0xc3, 0x74, 0x13, 0x8b, 0xfc, 0x59,
    0x6d, 0x55, 0x42, 0xcf, 0xe8, 0x0c, 0xd3, 0x49, 0x49, 0x0b, 0xa1, 0x68,
    0x25, 0x95, 0x50, 0x66, 0x4c, 0x60, 0x19, 0x7a, 0x5d, 0xd5, 0xd3, 0x57,
    0x40, 0xb3, 0x2a, 0x3f, 0xc1, 0x99, 0x33, 0x4d, 0xd8, 0x96, 0x16, 0x2d,
    0xf6, 0xf8, 0x14, 0xd5, 0x41, 0x7b, 0x29, 0x26, 0xe1, 0x1e, 0xd3, 0x1d,
    0xdd, 0xc3, 0x79, 0xff, 0x55, 0x56, 0xe5, 0xf0, 0x2e, 0x23, 0xe6, 0x3e,
    0xed, 0x7e, 0xb1, 0x5d, 0xcc, 0xab, 0xc6, 0xcc, 0x3f, 0xd7, 0x1e, 0x05,
    0x0a, 0x68, 0xe5, 0xe3, 0x0f, 0x58, 0x3f, 0x83, 0xa3, 0x77, 0x65, 0x3d,
    0xfe
};

constexpr uint8_t kCd[] = {
    0x30, 0x81, 0xe8, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
    0x07, 0x02, 0xa0, 0x81, 0xda, 0x30, 0x81, 0xd7, 0x02, 0x01, 0x03, 0x31,
    0x0d, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04,
    0x02, 0x01, 0x30, 0x43, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
    0x01, 0x07, 0x01, 0xa0, 0x36, 0x04, 0x34, 0x15, 0x24, 0x00, 0x01, 0x25,
    0x01, 0xf1, 0xff, 0x36, 0x02, 0x05, 0x01, 0x20, 0x18, 0x24, 0x03, 0x0e,
    0x2c, 0x04, 0x13, 0x5a, 0x49, 0x47, 0x32, 0x30, 0x32, 0x35, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x50, 0x32, 0x30, 0x30, 0x31, 0x24, 0x05,
    0x00, 0x24, 0x06, 0x00, 0x24, 0x07, 0x01, 0x24, 0x08, 0x00, 0x18, 0x31,
    0x7e, 0x30, 0x7c, 0x02, 0x01, 0x03, 0x80, 0x14, 0x62, 0xfa, 0x82, 0x33,
    0x59, 0xac, 0xfa, 0xa9, 0x96, 0x3e, 0x1c, 0xfa, 0x14, 0x0a, 0xdd, 0xf5,
    0x04, 0xf3, 0x71, 0x60, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01,
    0x65, 0x03, 0x04, 0x02, 0x01, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x04, 0x03, 0x02, 0x04, 0x48, 0x30, 0x46, 0x02, 0x21, 0x00,
    0xd8, 0xb5, 0xa2, 0x87, 0xc2, 0xfc, 0x3e, 0x1a, 0xc9, 0x67, 0x06, 0x25,
    0x3d, 0x03, 0xe5, 0x17, 0x3b, 0x76, 0xc5, 0x20, 0x0f, 0x8a, 0x1d, 0xaa,
    0x68, 0xab, 0x2e, 0x15, 0x9d, 0xf5, 0x97, 0x6d, 0x02, 0x21, 0x00, 0xd7,
    0xe6, 0xd3, 0x75, 0x98, 0x41, 0x89, 0xc4, 0x2b, 0x95, 0xbc, 0x50, 0x38,
    0xe0, 0x87, 0x32, 0x57, 0x2a, 0x87, 0x69, 0xb0, 0xe7, 0xae, 0x97, 0x25,
    0x49, 0x0c, 0x83, 0x29, 0x0b, 0x57, 0x02
};

CHIP_ERROR loadKeypair(Crypto::P256Keypair& keypair)
{
    Crypto::P256SerializedKeypair serialized_keypair;

    ReturnErrorOnFailure(serialized_keypair.SetLength(sizeof(kDacKey)));
    memcpy(serialized_keypair.Bytes(), kDacKey, sizeof(kDacKey));

    return keypair.Deserialize(serialized_keypair);
}

}

namespace mobmatter::matter {

CHIP_ERROR DacProviderImpl::GetDeviceAttestationCert(MutableByteSpan& out_dac_buffer)
{
    return CopySpanToMutableSpan(ByteSpan(kDacCert), out_dac_buffer);
}

CHIP_ERROR DacProviderImpl::GetProductAttestationIntermediateCert(MutableByteSpan& out_pai_buffer)
{
    return CopySpanToMutableSpan(ByteSpan(kPaiCert), out_pai_buffer);
}

CHIP_ERROR DacProviderImpl::GetCertificationDeclaration(MutableByteSpan& out_cd_buffer)
{
    return CopySpanToMutableSpan(ByteSpan(kCd), out_cd_buffer);
}

CHIP_ERROR DacProviderImpl::GetFirmwareInformation(MutableByteSpan& out_firmware_info_buffer)
{
    out_firmware_info_buffer.reduce_size(0);

    return CHIP_NO_ERROR;
}

CHIP_ERROR DacProviderImpl::SignWithDeviceAttestationKey(const ByteSpan& message_to_sign, MutableByteSpan& out_signature_buffer)
{
    Crypto::P256ECDSASignature signature;
    Crypto::P256Keypair keypair;

    VerifyOrReturnError(!out_signature_buffer.empty(), CHIP_ERROR_INVALID_ARGUMENT);
    VerifyOrReturnError(!message_to_sign.empty(), CHIP_ERROR_INVALID_ARGUMENT);
    VerifyOrReturnError(out_signature_buffer.size() >= signature.Capacity(), CHIP_ERROR_BUFFER_TOO_SMALL);

    ReturnErrorOnFailure(loadKeypair(keypair));
    ReturnErrorOnFailure(keypair.ECDSA_sign_msg(message_to_sign.data(), message_to_sign.size(), signature));

    return CopySpanToMutableSpan(ByteSpan(signature.ConstBytes(), signature.Length()), out_signature_buffer);
}

}
